{"version":3,"sources":["components/balance/Balance_BAK.js","../node_modules/@material-ui/icons/ArrowForwardIos.js","../node_modules/@material-ui/core/esm/SvgIcon/index.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@material-ui/icons/utils/createSvgIcon.js","../node_modules/@babel/runtime/helpers/extends.js"],"names":["args","props","Object","assign","barrelGetters","userData","accountNumber","accordionView","barrelSetters","setAccountType","setRedirectTo","setAccordionView","setResponseProps","setClearRefs","barrelFunctions","format","getAccountData","getTransactions","getShares","copyToClipboard","showMessage","t","useTranslation","refAccountNumber","useRef","userDataParsed","onAccountTypeSelected","type","available","acc_curr","acc_cred","acc_save","toggleView","view","newView","defaultActiveKey","header","border","transparent","backgroundHeader","backgroundBody","maxWidthBody","navigationdefaultActiveKey","onNavigationClick","Toggle","as","Card","Header","eventKey","style","cursor","backgroundColor","fontWeight","onClick","Collapse","Body","Text","ref","className","readOnly","width","background","defaultValue","document","queryCommandSupported","float","marginLeft","color","noValidate","Group","Label","fontSize","variant","_interopRequireDefault","require","defineProperty","exports","value","default","_react","_default","createElement","d","module","obj","__esModule","path","displayName","Component","memo","forwardRef","_SvgIcon","_extends2","process","muiName","_extends","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this"],"mappings":"yHAAA,wHAoBe,mBAACA,GAOd,IAKMC,EAAQC,OAAOC,OALN,GAKuBH,GAZf,EAsBnBC,EAAMG,cAJRC,EAlBqB,EAkBrBA,SACAC,EAnBqB,EAmBrBA,cACAC,EApBqB,EAoBrBA,cApBqB,EA8BnBN,EAAMO,cANRC,EAxBqB,EAwBrBA,eACAC,EAzBqB,EAyBrBA,cACAC,EA1BqB,EA0BrBA,iBAEAC,EA5BqB,EA4BrBA,iBACAC,EA7BqB,EA6BrBA,aA7BqB,EAsCnBZ,EAAMa,gBANRC,EAhCqB,EAgCrBA,OACAC,EAjCqB,EAiCrBA,eACAC,EAlCqB,EAkCrBA,gBACAC,EAnCqB,EAmCrBA,UAEAC,GArCqB,EAoCrBC,YApCqB,EAqCrBD,iBAMME,EAAMC,YAAe,WAArBD,EAGFE,EAAmBC,iBAAO,MAK1BC,EAAiBpB,EAQjBqB,EAAwB,SAACC,GAC7BlB,EAAekB,GACfjB,EAAc,cAGVkB,EACe,OAAnBH,EACIV,EACEU,EAAeI,SACbJ,EAAeK,SACfL,EAAeM,UAEnB,KACFF,EACiB,OAAnBJ,EAA0BV,EAAOU,EAAeI,UAAY,KAC1DC,EACiB,OAAnBL,EAA0BV,EAAOU,EAAeK,UAAY,KAC1DC,EACiB,OAAnBN,EAA0BV,EAAOU,EAAeM,UAAY,KAExC,OAAlBzB,GAAwBI,EAAc,aAM1C,IAAMsB,EAAa,SAACC,GAClB,IAAMC,EAAU3B,IAAkB0B,EAAOA,EAAO,KAMhD,GAJArB,EAAiB,MACjBD,EAAiBuB,GACjBrB,GAAa,GAEG,OAAZqB,EACF,OAAQD,GACN,IAAK,UACHjB,IACA,MAEF,IAAK,eACHC,EAAgB,GAChB,MAEF,IAAK,SAEHC,EAAU,KAgBlB,OACE,oCACE,kBAAC,IAAD,CAAWiB,iBAAkB5B,GAI3B,kBAAC,UAAD,CACE6B,QAAQ,EACRC,OAAQ,EACRC,aAAa,EACbC,iBAAiB,cACjBC,eAAe,cACfC,aAAa,OACbC,2BAA4B,IAC5BC,kBAAmB,cAEnB,kBAAC,IAAUC,OAAX,CACEC,GAAIC,IAAKC,OACTC,SAAS,gBACTC,MAAO,CACLC,OAAQ,UACRC,gBAAiB,cACjBC,WAAY,QAEdC,QAAS,kBAAMrB,EAAW,mBAEzBX,EAAE,mBAGL,kBAAC,IAAUiC,SAAX,CAAoBN,SAAS,iBAC3B,kBAAC,IAAKO,KAAN,KACE,kBAAC,IAAKC,KAAN,KACE,2BACEC,IAAKlC,EACLmC,UAAU,WACVC,UAAQ,EACRV,MAAO,CACLZ,OAAQ,EACRuB,MAAO,QACPC,WAAY,eAEdlC,KAAK,OACLmC,aAAcxD,IAEfyD,SAASC,sBAAsB,SAC9B,0BAAMf,MAAO,CAAEgB,MAAO,QAASC,WAAY,YACzC,4BACER,UAAU,qBACVL,QAAS,kBAAMlC,EAAgBI,KAE/B,kBAAC,IAAD,CAAc0B,MAAO,CAAEkB,MAAO,uBAY5C,kBAAC,UAAD,CACE/B,QAAQ,EACRC,OAAQ,EACRI,aAAa,OACbC,2BAA4B,IAC5BC,kBAAmB,cAEnB,kBAAC,IAAUC,OAAX,CACEC,GAAIC,IAAKC,OACTC,SAAS,UACTC,MAAO,CACLC,OAAQ,UACRC,gBAAiB,cACjBC,WAAY,QAGdC,QAAS,kBAAMrB,EAAW,aAEzBX,EAAE,YAGL,kBAAC,IAAUiC,SAAX,CAAoBN,SAAS,WAC3B,kBAAC,IAAKO,KAAN,KACE,kBAAC,IAAD,CAAMa,YAAU,GACd,kBAAC,IAAKC,MAAN,KACE,kBAAC,IAAKC,MAAN,KAAajD,EAAE,cAEf,kBAAC,IAAKmC,KAAN,KACE,yBAAKP,MAAO,CAAEsB,SAAU,QAAU3C,KAGtC,kBAAC,IAAKyC,MAAN,KACE,wBAAIX,UAAU,cACZ,wBAAIA,UAAU,qEACZ,yBAAKT,MAAO,IAAK5B,EAAE,oBACnB,0BACEqC,UAAU,OACVL,QAAS,kBAAM3B,EAAsB,cAErC,kBAAC,IAAD,CAAO8C,QAAQ,SAAS3C,GAJ1B,OAME,kBAAC,IAAD,CAAqBoB,MAAO,CAAEkB,MAAO,mBAGzC,wBAAIT,UAAU,qEACZ,yBAAKT,MAAO,IAAK5B,EAAE,mBAEnB,0BACEqC,UAAU,OACVL,QAAS,kBAAM3B,EAAsB,cAErC,kBAAC,IAAD,CAAO8C,QAAQ,SAAS1C,GAJ1B,OAME,kBAAC,IAAD,CAAqBmB,MAAO,CAAEkB,MAAO,mBAGzC,wBAAIT,UAAU,qEACZ,yBAAKT,MAAO,IAAK5B,EAAE,oBACnB,0BACEqC,UAAU,OACVL,QAAS,kBAAM3B,EAAsB,cAErC,kBAAC,IAAD,CAAO8C,QAAQ,SAASzC,GAJ1B,OAME,kBAAC,IAAD,CAAqBkB,MAAO,CAAEkB,MAAO,yBAarD,kBAAC,UAAD,CACE/B,QAAQ,EACRC,OAAQ,EACRI,aAAa,OACbC,2BAA4B,IAC5BC,kBAAmB,cAEnB,kBAAC,IAAUC,OAAX,CACEC,GAAIC,IAAKC,OACTC,SAAS,eACTC,MAAO,CACLC,OAAQ,UACRC,gBAAiB,cACjBC,WAAY,QAEdC,QAAS,kBAAMrB,EAAW,kBAEzBX,EAAE,iBAGL,kBAAC,IAAUiC,SAAX,CAAoBN,SAAS,gBAC3B,kBAAC,IAAKO,KAAN,KACE,kBAAC,UAAiBvD,MAQxB,kBAAC,UAAD,CACEoC,QAAQ,EACRC,OAAQ,EACRI,aAAa,OACbC,2BAA4B,IAC5BC,kBAAmB,cAEnB,kBAAC,IAAUC,OAAX,CACEC,GAAIC,IAAKC,OACTC,SAAS,SACTC,MAAO,CACLC,OAAQ,UACRC,gBAAiB,cACjBC,WAAY,QAEdC,QAAS,kBAAMrB,EAAW,YAEzBX,EAAE,WAGL,kBAAC,IAAUiC,SAAX,CAAoBN,SAAS,UAC3B,kBAAC,IAAKO,KAAN,KACE,kBAAC,UAAWvD,U,iCCzU1B,IAAIyE,EAAyBC,EAAQ,KAErCxE,OAAOyE,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAASN,EAAuBC,EAAQ,IAIxCM,GAAW,EAFMP,EAAuBC,EAAQ,MAElBI,SAASC,EAAOD,QAAQG,cAAc,OAAQ,CAC9EC,EAAG,mDACD,mBAEJN,EAAQE,QAAUE,G,iCCjBlB,+D,kBCMAG,EAAOP,QANP,SAAgCQ,GAC9B,OAAOA,GAAOA,EAAIC,WAAaD,EAAM,CACnC,QAAWA,K,iCCAf,IAAIX,EAAyBC,EAAQ,KAErCxE,OAAOyE,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,QAQR,SAAuBQ,EAAMC,GAC3B,IAAIC,EAAYT,EAAOD,QAAQW,KAAKV,EAAOD,QAAQY,YAAW,SAAUzF,EAAOwD,GAC7E,OAAOsB,EAAOD,QAAQG,cAAcU,EAASb,SAAS,EAAIc,EAAUd,SAAS,CAC3ErB,IAAKA,GACJxD,GAAQqF,OAGTO,EAKJ,OADAL,EAAUM,QAAUH,EAASb,QAAQgB,QAC9BN,GAlBT,IAAII,EAAYnB,EAAuBC,EAAQ,MAE3CK,EAASN,EAAuBC,EAAQ,IAExCiB,EAAWlB,EAAuBC,EAAQ,O,kBCb9C,SAASqB,IAeP,OAdAZ,EAAOP,QAAUmB,EAAW7F,OAAOC,QAAU,SAAU6F,GACrD,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVlG,OAAOoG,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,GAGFD,EAASU,MAAMC,KAAMR,WAG9Bf,EAAOP,QAAUmB","file":"static/js/39.e968cd67.chunk.js","sourcesContent":["/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, Badge, Accordion, Card } from \"react-bootstrap\";\r\n// import { useAccordionToggle } from \"react-bootstrap/AccordionToggle\";\r\n// import { Redirect } from \"react-router-dom\";\r\n// import Octicon, { ChevronRight } from \"@primer/octicons-react\";\r\n// import AccessAlarmIcon from \"@material-ui/icons/AccessAlarm\";\r\nimport ArrowForwardIosIcon from \"@material-ui/icons/ArrowForwardIos\";\r\nimport { FileCopy as FileCopyIcon } from \"@material-ui/icons\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\nimport ZCard from \"../card\";\r\nimport Transactions from \"../transactions\";\r\nimport Shares from \"../shares\";\r\n\r\nexport default (args) => {\r\n  // let defaults = {};\r\n  // const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Default Properties\r\n   */\r\n  let defaults = {};\r\n\r\n  /**\r\n   * Properties\r\n   */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const {\r\n    userData,\r\n    accountNumber,\r\n    accordionView,\r\n    // currencyAbbr,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setAccountType,\r\n    setRedirectTo,\r\n    setAccordionView,\r\n    // setDeleteResponseProp,\r\n    setResponseProps,\r\n    setClearRefs,\r\n  } = props.barrelSetters;\r\n  const {\r\n    format,\r\n    getAccountData,\r\n    getTransactions,\r\n    getShares,\r\n    showMessage,\r\n    copyToClipboard,\r\n  } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  // const userData = props.data.userData;\r\n  // let format = props.format;\r\n  const { t } = useTranslation(\"Balance\");\r\n  // const [redirect, setRedirect] = useState(false);\r\n\r\n  const refAccountNumber = useRef(null);\r\n\r\n  // console.log(\"BALANCE DATA:\", props);\r\n  // console.log(\"BALANCE userData\", userData);\r\n  // const userDataParsed = JSON.parse(userData);\r\n  const userDataParsed = userData;\r\n\r\n  // let footer = <small className=\"text-muted\">Last updated 3 mins ago</small>;\r\n\r\n  /**\r\n   *\r\n   * @param {*} type\r\n   */\r\n  const onAccountTypeSelected = (type) => {\r\n    setAccountType(type);\r\n    setRedirectTo(\"/transfer\");\r\n  };\r\n\r\n  const available =\r\n    userDataParsed !== null\r\n      ? format(\r\n          userDataParsed.acc_curr +\r\n            userDataParsed.acc_cred +\r\n            userDataParsed.acc_save\r\n        )\r\n      : null;\r\n  let acc_curr =\r\n    userDataParsed !== null ? format(userDataParsed.acc_curr) : null;\r\n  let acc_cred =\r\n    userDataParsed !== null ? format(userDataParsed.acc_cred) : null;\r\n  let acc_save =\r\n    userDataParsed !== null ? format(userDataParsed.acc_save) : null;\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n   *\r\n   * @param {*} view\r\n   */\r\n  const toggleView = (view) => {\r\n    const newView = accordionView !== view ? view : null;\r\n\r\n    setResponseProps(null);\r\n    setAccordionView(newView);\r\n    setClearRefs(true);\r\n\r\n    if (newView !== null) {\r\n      switch (view) {\r\n        case \"balance\":\r\n          getAccountData();\r\n          break;\r\n\r\n        case \"transactions\":\r\n          getTransactions(1);\r\n          break;\r\n\r\n        case \"shares\":\r\n          // setDeleteResponseProp(\"get shares\");\r\n          getShares(1);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  // const copyToClipboard = () => {\r\n  //   refAccountNumber.current.select();\r\n  //   document.execCommand(\"copy\");\r\n  //   refAccountNumber.current.blur();\r\n  //   showMessage(\"COPIED_TO_CLIPBOARD\", \"info\", false);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={accordionView}>\r\n        {/**\r\n         * Account number\r\n         */}\r\n        <ZCard\r\n          header={false}\r\n          border={0}\r\n          transparent={true}\r\n          backgroundHeader=\"Transparent\"\r\n          backgroundBody=\"Transparent\"\r\n          maxWidthBody=\"100%\"\r\n          navigationdefaultActiveKey={\"-\"}\r\n          onNavigationClick={() => {}}\r\n        >\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"accountNumber\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              backgroundColor: \"Transparent\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={() => toggleView(\"accountNumber\")}\r\n          >\r\n            {t(\"Account number\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"accountNumber\">\r\n            <Card.Body>\r\n              <Card.Text>\r\n                <input\r\n                  ref={refAccountNumber}\r\n                  className=\"no-focus\"\r\n                  readOnly\r\n                  style={{\r\n                    border: 0,\r\n                    width: \"10rem\",\r\n                    background: \"Transparent\",\r\n                  }}\r\n                  type=\"text\"\r\n                  defaultValue={accountNumber}\r\n                />\r\n                {document.queryCommandSupported(\"copy\") && (\r\n                  <span style={{ float: \"right\", marginLeft: \"0.25rem\" }}>\r\n                    <button\r\n                      className=\"button-transparent\"\r\n                      onClick={() => copyToClipboard(refAccountNumber)}\r\n                    >\r\n                      <FileCopyIcon style={{ color: \"var(--dark)\" }} />\r\n                    </button>\r\n                  </span>\r\n                )}\r\n              </Card.Text>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </ZCard>\r\n\r\n        {/**\r\n         * Balance\r\n         */}\r\n        <ZCard\r\n          header={false}\r\n          border={0}\r\n          maxWidthBody=\"100%\"\r\n          navigationdefaultActiveKey={\"-\"}\r\n          onNavigationClick={() => {}}\r\n        >\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"balance\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              backgroundColor: \"Transparent\",\r\n              fontWeight: \"bold\",\r\n              // backgroundColor: \"#e8f6f3\",\r\n            }}\r\n            onClick={() => toggleView(\"balance\")}\r\n          >\r\n            {t(\"Balance\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"balance\">\r\n            <Card.Body>\r\n              <Form noValidate>\r\n                <Form.Group>\r\n                  <Form.Label>{t(\"Available\")}</Form.Label>\r\n\r\n                  <Form.Text>\r\n                    <div style={{ fontSize: \"3em\" }}>{available}</div>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <ul className=\"list-group\">\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Current account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_curr\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_curr}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Credit account\")}</div>\r\n\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_cred\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_cred}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                      <div style={{}}>{t(\"Savings account\")}</div>\r\n                      <span\r\n                        className=\"link\"\r\n                        onClick={() => onAccountTypeSelected(\"acc_save\")}\r\n                      >\r\n                        <Badge variant=\"Light\">{acc_save}</Badge>\r\n                        &nbsp;\r\n                        <ArrowForwardIosIcon style={{ color: \"var(--dark)\" }} />\r\n                      </span>\r\n                    </li>\r\n                  </ul>\r\n                </Form.Group>\r\n              </Form>\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </ZCard>\r\n\r\n        {/**\r\n         * Transactions\r\n         */}\r\n        <ZCard\r\n          header={false}\r\n          border={0}\r\n          maxWidthBody=\"100%\"\r\n          navigationdefaultActiveKey={\"-\"}\r\n          onNavigationClick={() => {}}\r\n        >\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"transactions\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              backgroundColor: \"Transparent\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={() => toggleView(\"transactions\")}\r\n          >\r\n            {t(\"Transactions\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"transactions\">\r\n            <Card.Body>\r\n              <Transactions {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </ZCard>\r\n\r\n        {/**\r\n         * Shares\r\n         */}\r\n        <ZCard\r\n          header={false}\r\n          border={0}\r\n          maxWidthBody=\"100%\"\r\n          navigationdefaultActiveKey={\"-\"}\r\n          onNavigationClick={() => {}}\r\n        >\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"shares\"\r\n            style={{\r\n              cursor: \"pointer\",\r\n              backgroundColor: \"Transparent\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n            onClick={() => toggleView(\"shares\")}\r\n          >\r\n            {t(\"Shares\")}\r\n          </Accordion.Toggle>\r\n\r\n          <Accordion.Collapse eventKey=\"shares\">\r\n            <Card.Body>\r\n              <Shares {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </ZCard>\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M5.88 4.12L13.76 12l-7.88 7.88L8 22l10-10L8 2z\"\n}), 'ArrowForwardIos');\n\nexports.default = _default;","export { default } from './SvgIcon';","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createSvgIcon;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _SvgIcon = _interopRequireDefault(require(\"@material-ui/core/SvgIcon\"));\n\nfunction createSvgIcon(path, displayName) {\n  var Component = _react.default.memo(_react.default.forwardRef(function (props, ref) {\n    return _react.default.createElement(_SvgIcon.default, (0, _extends2.default)({\n      ref: ref\n    }, props), path);\n  }));\n\n  if (process.env.NODE_ENV !== 'production') {\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = _SvgIcon.default.muiName;\n  return Component;\n}","function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;"],"sourceRoot":""}