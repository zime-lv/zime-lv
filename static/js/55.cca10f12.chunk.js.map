{"version":3,"sources":["components/myBusiness/MyBusiness_NEW.js"],"names":["args","props","Object","assign","namespace","paddingBody","barrelGetters","userBusinesses","countBusinesses","businessesPerPage","activePageBusinesses","userBusinessesLoaded","activeBusiness","activeBusinessID","businessPurposes","countBusinessPurposes","businessPurposesPerPage","activePageBusinessPurposes","activeBusinesPurpose","activePurposeProperty","purposeShareholders","activePurposeData","accountNumber","barrelSetters","setRedirectTo","setResponseProps","setBusinessPurposes","setActiveBusiness","setActiveBusinesPurpose","setActivePurposeProperty","setActivePageBusinessPurposes","setActivePurposeData","setPurposeRegistrationTitle","setPurposeRegistrationDescription","setPurposeRegistrationKeywords","setClearRefs","barrelFunctions","getBusinesses","getBusinessPurposes","getPurposeShareholders","sendRequest","showRequestStatus","formatDate","copyToClipboard","findPurposes","t","useTranslation","refBusinessID","useRef","menuItems","purposes","cntPurposes","countShareholders","keys","map","business","keyBusiness","purpose","keyPurpose","business_id","Item","action","key","purpose_id","eventKey","style","cursor","onClick","purposeID","TogglePurpose","whiteSpace","title","float","e","description","keywords","JSON","stringify","stopPropagation","fontSize","color","Pane","defaultActiveKey","eventkey","active","value","shareholder","keyShareholder","shareholder_id","firstname","lastname","roles","share","arrRoles","split","id","bp","status","data","purpose_status","req","Text","Check","type","custom","disabled","label","checked","onChange","console","log","bg","Toggle","as","Card","Header","Collapse","Body","jsx","date","Date","created","businessSince","month","day","year","businessID","ToggleBusiness","Container","marginBottom","advancedSearch","placeholder","captionAdvancedSearch","onSubmit","sm","variant","size","countItems","itemsPerPage","number","Content","border","ref","className","readOnly","width","background","defaultValue","document","queryCommandSupported","marginLeft","category","subcategory","subcategory2","paddingBottom"],"mappings":"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","file":"static/js/55.cca10f12.chunk.js","sourcesContent":["/**\r\n * System imports\r\n ============================================================================ */\r\nimport React, { useRef } from \"react\";\r\nimport {\r\n  Accordion,\r\n  Card,\r\n  Tab,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n  Form,\r\n} from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Add, Store, Edit, FileCopy as FileCopyIcon } from \"@material-ui/icons\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Dropzone from \"../dropzone\";\r\nimport BusinessRegistration from \"../businessRegistration\";\r\nimport PurposeRegistration from \"../purposeRegistration\";\r\nimport ShareholderRegistration from \"../shareholderRegistration\";\r\nimport Shareholder from \"../shareholder\";\r\nimport Pagination from \"../pagination\";\r\nimport Search from \"../search\";\r\nimport AccordionCard from \"../accordionCard\";\r\nimport CopyableField from \"../copyableField\";\r\n\r\n/**\r\n * Default export\r\n ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = { namespace: \"MyBusiness\", paddingBody: \"20px 0 0 0\" };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    userBusinesses,\r\n    countBusinesses,\r\n    businessesPerPage,\r\n    activePageBusinesses,\r\n    userBusinessesLoaded,\r\n    activeBusiness,\r\n    activeBusinessID,\r\n    businessPurposes,\r\n    countBusinessPurposes,\r\n    businessPurposesPerPage,\r\n    activePageBusinessPurposes,\r\n    activeBusinesPurpose,\r\n    activePurposeProperty,\r\n    purposeShareholders,\r\n    // purposeID,\r\n    activePurposeData,\r\n    // language,\r\n    accountNumber,\r\n  } = props.barrelGetters;\r\n  const {\r\n    setRedirectTo,\r\n    setResponseProps,\r\n    setBusinessPurposes,\r\n    setActiveBusiness,\r\n    setActiveBusinesPurpose,\r\n    setActivePurposeProperty,\r\n    setActivePageBusinessPurposes,\r\n    setActivePurposeData,\r\n    setPurposeRegistrationTitle,\r\n    setPurposeRegistrationDescription,\r\n    setPurposeRegistrationKeywords,\r\n    setClearRefs,\r\n  } = props.barrelSetters;\r\n  const {\r\n    getBusinesses,\r\n    getBusinessPurposes,\r\n    getPurposeShareholders,\r\n    sendRequest,\r\n    showRequestStatus,\r\n    formatDate,\r\n    copyToClipboard,\r\n    findPurposes,\r\n  } = props.barrelFunctions;\r\n  // const {  } = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Module constants\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n  const refBusinessID = useRef(null);\r\n  const refPurposeID = useRef(null);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n\r\n  /**\r\n   * Toggle business (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  const ToggleBusiness = ({ eventKey, businessID }) => {\r\n    if (activeBusiness === eventKey) {\r\n      setActiveBusiness(null);\r\n      setActivePageBusinessPurposes(null);\r\n    } else {\r\n      setResponseProps(null);\r\n      getBusinessPurposes(businessID, eventKey, 1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Toggle purpose (Accordion card)\r\n   * @param {*} param0\r\n   */\r\n  const TogglePurpose = ({ eventKey, purposeID }) => {\r\n    setResponseProps(null);\r\n    getPurposeShareholders(purposeID, eventKey);\r\n  };\r\n\r\n  /**\r\n   * Create:\r\n   * - business menu\r\n   * - business purposes menu\r\n   */\r\n  let menuItems = [];\r\n  let purposes = [];\r\n  let cntBusinesses = 0;\r\n  let cntPurposes = 0;\r\n  let countShareholders = 0;\r\n  userBusinesses !== null &&\r\n    Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n      cntBusinesses++;\r\n      menuItems[keyBusiness] = [];\r\n      purposes[keyBusiness] = [];\r\n      businessPurposes !== null &&\r\n        Object.keys(businessPurposes).map((purpose, keyPurpose) => {\r\n          cntPurposes++;\r\n          if (\r\n            businessPurposes[purpose].business_id ===\r\n            userBusinesses[business].business_id\r\n          ) {\r\n            menuItems[keyBusiness][keyPurpose] = (\r\n              <ListGroup.Item\r\n                action\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n                style={{ cursor: \"default\" }}\r\n                onClick={() =>\r\n                  TogglePurpose({\r\n                    eventKey: keyPurpose,\r\n                    purposeID: businessPurposes[purpose].purpose_id,\r\n                  })\r\n                }\r\n              >\r\n                <span style={{ whiteSpace: \"nowrap\", cursor: \"pointer\" }}>\r\n                  {businessPurposes[purpose].title}\r\n                </span>\r\n\r\n                <span style={{ float: \"right\" }}>\r\n                  <Edit\r\n                    onClick={(e) => {\r\n                      setPurposeRegistrationTitle(\r\n                        businessPurposes[purpose].title !== null\r\n                          ? businessPurposes[purpose].title\r\n                          : \"\"\r\n                      );\r\n                      setPurposeRegistrationDescription(\r\n                        businessPurposes[purpose].description !== null\r\n                          ? businessPurposes[purpose].description\r\n                          : \"\"\r\n                      );\r\n                      setPurposeRegistrationKeywords(\r\n                        businessPurposes[purpose].keywords !== null\r\n                          ? businessPurposes[purpose].keywords\r\n                          : \"\"\r\n                      );\r\n\r\n                      setActivePurposeData(\r\n                        JSON.stringify(businessPurposes[purpose])\r\n                      );\r\n                      setActiveBusinesPurpose(\"addPurpose\");\r\n                      e.stopPropagation();\r\n                    }}\r\n                    fontSize=\"small\"\r\n                    style={{ color: \"var(--dark)\", cursor: \"pointer\" }}\r\n                  />\r\n                </span>\r\n              </ListGroup.Item>\r\n            );\r\n\r\n            purposes[keyBusiness][keyPurpose] = (\r\n              <Tab.Pane\r\n                key={businessPurposes[purpose].purpose_id}\r\n                eventKey={businessPurposes[purpose].purpose_id}\r\n              >\r\n                <Accordion\r\n                  defaultActiveKey={\r\n                    activePurposeProperty !== null\r\n                      ? activePurposeProperty\r\n                      : \"purpose_id\" // \"shareholders\"\r\n                  }\r\n                >\r\n                  {/* Purpose ID */}\r\n                  <AccordionCard\r\n                    title={t(\"Purpose ID\")}\r\n                    eventkey=\"purpose_id\"\r\n                    active={activePurposeProperty}\r\n                    paddingBody={props.paddingBody}\r\n                    onClick={() => setActivePurposeProperty(\"purpose_id\")}\r\n                  >\r\n                    <CopyableField\r\n                      value={businessPurposes[purpose].purpose_id}\r\n                      {...args}\r\n                    />\r\n                  </AccordionCard>\r\n\r\n                  {/* Purpose shareholders */}\r\n                  <AccordionCard\r\n                    title={t(\"Purpose Shareholders\")}\r\n                    eventkey=\"shareholders\"\r\n                    active={activePurposeProperty}\r\n                    paddingBody={props.paddingBody}\r\n                    onClick={() => setActivePurposeProperty(\"shareholders\")}\r\n                  >\r\n                    <>\r\n                      <ShareholderRegistration\r\n                        {...args}\r\n                        purposeID={businessPurposes[purpose].purpose_id}\r\n                      />\r\n\r\n                      {/* Toggle: Shareholders list */}\r\n                      {typeof purposeShareholders !== \"undefined\" &&\r\n                        purposeShareholders !== null &&\r\n                        Object.keys(purposeShareholders).map(\r\n                          (shareholder, keyShareholder) => {\r\n                            if (\r\n                              purposeShareholders[shareholder].purpose_id ===\r\n                              businessPurposes[purpose].purpose_id\r\n                            ) {\r\n                              const { purpose_id } = purposeShareholders[\r\n                                shareholder\r\n                              ];\r\n                              const {\r\n                                shareholder_id,\r\n                                firstname,\r\n                                lastname,\r\n                                // email,\r\n                                roles,\r\n                                share,\r\n                              } = purposeShareholders[shareholder];\r\n\r\n                              countShareholders++;\r\n\r\n                              const arrRoles =\r\n                                roles !== null ? roles.split(\",\") : [];\r\n\r\n                              return (\r\n                                <Shareholder\r\n                                  {...args}\r\n                                  key={keyShareholder}\r\n                                  id={keyShareholder}\r\n                                  shareholder={shareholder_id}\r\n                                  purpose={purpose_id}\r\n                                  firstname={firstname}\r\n                                  lastname={lastname}\r\n                                  share={share}\r\n                                  roles={arrRoles}\r\n                                />\r\n                              );\r\n                            } else {\r\n                              return \"\"; // TODO: check if this works\r\n                            }\r\n                          }\r\n                        )}\r\n\r\n                      {showRequestStatus(\r\n                        \"get purpose shareholders / SELECT shares\",\r\n                        countShareholders,\r\n                        t(\"Loading shareholders...\"),\r\n                        t(\"No shareholders\"),\r\n                        \"finished\"\r\n                      )}\r\n\r\n                      {/* End shareholders list */}\r\n                    </>\r\n                  </AccordionCard>\r\n\r\n                  {/* Purpose status */}\r\n                  <AccordionCard\r\n                    title={t(\"Purpose Status\")}\r\n                    eventkey=\"productStatus\"\r\n                    active={activePurposeProperty}\r\n                    paddingBody={props.paddingBody}\r\n                    onClick={(e) => {\r\n                      const bp = businessPurposes;\r\n                      bp[purpose].status =\r\n                        businessPurposes[purpose].status === 0 ? 1 : 0;\r\n                      setBusinessPurposes(JSON.stringify(bp));\r\n\r\n                      let data = {};\r\n                      data.purpose_id = businessPurposes[purpose].purpose_id;\r\n                      data.purpose_status = businessPurposes[purpose].status;\r\n                      return sendRequest({\r\n                        req: \"change purpose status\",\r\n                        data,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <Form>\r\n                      {typeof purposeShareholders === \"undefined\" ||\r\n                        (purposeShareholders === null && (\r\n                          <Form.Text>\r\n                            {t(\r\n                              \"To publish, please add at least one shareholder\"\r\n                            )}\r\n                            <br />\r\n                            <br />\r\n                          </Form.Text>\r\n                        ))}\r\n\r\n                      {typeof purposeShareholders !== \"undefined\" &&\r\n                        purposeShareholders !== null && (\r\n                          <Form.Check\r\n                            type=\"switch\"\r\n                            custom\r\n                            disabled={\r\n                              typeof purposeShareholders === \"undefined\" ||\r\n                              purposeShareholders === null\r\n                            }\r\n                            label={t(\r\n                              businessPurposes[purpose].status === 0\r\n                                ? \"Not published\"\r\n                                : \"Published\"\r\n                            )}\r\n                            checked={businessPurposes[purpose].status === 1}\r\n                            onChange={(e) => {\r\n                              console.log(e);\r\n                            }}\r\n                          />\r\n                        )}\r\n                    </Form>\r\n                  </AccordionCard>\r\n\r\n                  {/* Purpose title */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"default\" }}\r\n                      eventKey=\"title\"\r\n                      onClick={() => setActivePurposeProperty(\"title\")}\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        {t(\"Purpose Title\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey=\"title\">\r\n                      <Card.Body>\r\n                        <Card.Text>{businessPurposes[purpose].title}</Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/*\r\n                   * Purpose description\r\n                   */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"default\" }}\r\n                      eventKey=\"description\"\r\n                      onClick={() => setActivePurposeProperty(\"description\")}\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        {t(\"Purpose Description\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey=\"description\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].description}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/*\r\n                   * Keywords\r\n                   */}\r\n                  <Card bg=\"light\">\r\n                    <Accordion.Toggle\r\n                      as={Card.Header}\r\n                      style={{ cursor: \"default\" }}\r\n                      eventKey=\"keywords\"\r\n                      onClick={() => setActivePurposeProperty(\"keywords\")}\r\n                    >\r\n                      <span style={{ cursor: \"pointer\" }}>\r\n                        {t(\"Purpose Keywords\")}\r\n                      </span>\r\n                    </Accordion.Toggle>\r\n\r\n                    <Accordion.Collapse eventKey=\"keywords\">\r\n                      <Card.Body>\r\n                        <Card.Text>\r\n                          {businessPurposes[purpose].keywords}\r\n                        </Card.Text>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                  </Card>\r\n\r\n                  {/* End of purpose properties */}\r\n                </Accordion>\r\n              </Tab.Pane>\r\n            );\r\n          }\r\n          countShareholders = 0;\r\n          return true;\r\n        });\r\n\r\n      return true;\r\n    });\r\n\r\n  const jsx = (\r\n    <>\r\n      <Accordion\r\n        defaultActiveKey={\r\n          activeBusiness !== null || !userBusinessesLoaded\r\n            ? activeBusiness\r\n            : \"myBusinesses\"\r\n        }\r\n      >\r\n        {/* Add business location top */}\r\n\r\n        {/* List user businesses */}\r\n        {userBusinesses !== null &&\r\n          Object.keys(userBusinesses).map((business, keyBusiness) => {\r\n            const date = new Date(userBusinesses[business].created);\r\n            const businessSince = formatDate(date, {\r\n              month: \"long\",\r\n              day: \"numeric\",\r\n              year: \"numeric\",\r\n            });\r\n\r\n            return (\r\n              <Card key={keyBusiness}>\r\n                <Accordion.Toggle\r\n                  as={Card.Header}\r\n                  eventKey={keyBusiness}\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() =>\r\n                    ToggleBusiness({\r\n                      eventKey: keyBusiness,\r\n                      businessID: userBusinesses[business].business_id,\r\n                    })\r\n                  }\r\n                >\r\n                  <Store style={{ color: \"var(--dark)\" }} />{\" \"}\r\n                  {userBusinesses[business].title}\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={keyBusiness}>\r\n                  <Card.Body>\r\n                    <Tab.Container\r\n                      id=\"left-tabs-example\"\r\n                      defaultActiveKey={\r\n                        activeBusinesPurpose !== null\r\n                          ? activeBusinesPurpose\r\n                          : \"aboutBusiness\"\r\n                      }\r\n                    >\r\n                      {/**\r\n                       * Row: Search\r\n                       */}\r\n                      <Row style={{ marginBottom: \"1.2rem\" }}>\r\n                        <Col>\r\n                          <Search\r\n                            advancedSearch={false}\r\n                            placeholder={t(\"Find purposes...\")}\r\n                            captionAdvancedSearch={t(\"Advanced search\")}\r\n                            onSubmit={findPurposes}\r\n                            {...args}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      {/**\r\n                       * Row: Purposes\r\n                       */}\r\n                      <Row>\r\n                        {/**\r\n                         * Layout: Left side - Menu\r\n                         */}\r\n                        <Col sm={5}>\r\n                          <ListGroup variant=\"flush\">\r\n                            {/* Menu item: About business */}\r\n                            <ListGroup.Item\r\n                              action\r\n                              eventKey=\"aboutBusiness\"\r\n                              style={{ cursor: \"default\" }}\r\n                              onClick={(e) => {\r\n                                setActivePurposeData(null);\r\n                                setActiveBusinesPurpose(null);\r\n                                e.stopPropagation();\r\n                              }}\r\n                            >\r\n                              <span\r\n                                style={{\r\n                                  whiteSpace: \"nowrap\",\r\n                                  cursor: \"pointer\",\r\n                                }}\r\n                              >\r\n                                {t(\"About\")}\r\n                              </span>\r\n                              <span style={{ float: \"right\" }}>\r\n                                <Add\r\n                                  onClick={(e) => {\r\n                                    setClearRefs(true);\r\n                                    setActivePurposeData(null);\r\n                                    setActiveBusinesPurpose(\"addPurpose\");\r\n                                    e.stopPropagation();\r\n                                  }}\r\n                                  fontSize=\"small\"\r\n                                  style={{\r\n                                    color: \"var(--dark)\",\r\n                                    cursor: \"pointer\",\r\n                                  }}\r\n                                />\r\n                              </span>\r\n                            </ListGroup.Item>\r\n\r\n                            {/* Menu items: Registered purposes */}\r\n                            {menuItems[keyBusiness]}\r\n\r\n                            {/* old add purpose */}\r\n                          </ListGroup>\r\n                          {countBusinessPurposes !== null && (\r\n                            <>\r\n                              <br />\r\n                              <Pagination\r\n                                {...args}\r\n                                size=\"sm\"\r\n                                countItems={countBusinessPurposes}\r\n                                itemsPerPage={businessPurposesPerPage}\r\n                                active={activePageBusinessPurposes}\r\n                                onClick={(number) =>\r\n                                  getBusinessPurposes(\r\n                                    activeBusinessID,\r\n                                    0,\r\n                                    number\r\n                                  )\r\n                                }\r\n                              />\r\n                            </>\r\n                          )}\r\n\r\n                          {showRequestStatus(\r\n                            \"get business purposes / SELECT purposes\",\r\n                            cntPurposes,\r\n                            t(\"Loading purposes...\"),\r\n                            t(\"No purposes\"),\r\n                            \"finished\"\r\n                          )}\r\n                        </Col>\r\n\r\n                        {/**\r\n                         * Layout: Right side - Content\r\n                         */}\r\n                        <Col sm={7}>\r\n                          <Tab.Content>\r\n                            <Tab.Pane eventKey=\"aboutBusiness\">\r\n                              <Accordion defaultActiveKey=\"businessID\">\r\n                                {/* Business ID */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessID\"\r\n                                  >\r\n                                    {t(\"Business ID\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessID\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          <input\r\n                                            ref={refBusinessID}\r\n                                            className=\"no-focus\"\r\n                                            readOnly\r\n                                            style={{\r\n                                              border: 0,\r\n                                              width: \"13rem\",\r\n                                              background: \"Transparent\",\r\n                                            }}\r\n                                            type=\"text\"\r\n                                            defaultValue={\r\n                                              userBusinesses[business]\r\n                                                .business_id\r\n                                            }\r\n                                          />\r\n                                          {document.queryCommandSupported(\r\n                                            \"copy\"\r\n                                          ) && (\r\n                                            <span\r\n                                              style={{\r\n                                                float: \"right\",\r\n                                                marginLeft: \"0.25rem\",\r\n                                              }}\r\n                                            >\r\n                                              <button\r\n                                                className=\"button-transparent\"\r\n                                                onClick={() =>\r\n                                                  copyToClipboard(refBusinessID)\r\n                                                }\r\n                                              >\r\n                                                <FileCopyIcon\r\n                                                  style={{\r\n                                                    color: \"var(--dark)\",\r\n                                                  }}\r\n                                                />\r\n                                              </button>\r\n                                            </span>\r\n                                          )}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business description */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessDescription\"\r\n                                  >\r\n                                    {t(\"Business Description\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessDescription\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>\r\n                                          {userBusinesses[business]\r\n                                            .description !== \"\" ? (\r\n                                            userBusinesses[business].description\r\n                                          ) : (\r\n                                            <span className=\"text-center text-muted\">\r\n                                              {t(\"No description\")}\r\n                                            </span>\r\n                                          )}\r\n                                        </Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n\r\n                                {/* Business Creation Date */}\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    style={{ cursor: \"pointer\" }}\r\n                                    eventKey=\"businessCreationDate\"\r\n                                  >\r\n                                    {t(\"Business Created\")}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"businessCreationDate\">\r\n                                    <Card border=\"light\">\r\n                                      <Card.Body>\r\n                                        <Card.Text>{businessSince}</Card.Text>\r\n                                      </Card.Body>\r\n                                    </Card>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n\r\n                            {/* Start Business purposes */}\r\n                            {purposes[keyBusiness]}\r\n                            {/* End Business purposes */}\r\n\r\n                            {/*\r\n                             * Add new purpose / update existing purpose\r\n                             */}\r\n                            <Tab.Pane eventKey=\"addPurpose\">\r\n                              <Accordion defaultActiveKey=\"newPurpose\">\r\n                                <Card>\r\n                                  <Accordion.Toggle\r\n                                    as={Card.Header}\r\n                                    eventKey=\"newPurpose\"\r\n                                    style={{ cursor: \"default\" }}\r\n                                  >\r\n                                    {t(\r\n                                      activePurposeData === null\r\n                                        ? \"New Purpose\"\r\n                                        : \"Edit Purpose\"\r\n                                    )}\r\n                                  </Accordion.Toggle>\r\n                                  <Accordion.Collapse eventKey=\"newPurpose\">\r\n                                    <Card.Body>\r\n                                      <PurposeRegistration\r\n                                        {...args}\r\n                                        businessID={\r\n                                          userBusinesses[business].business_id\r\n                                        }\r\n                                        id={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.id\r\n                                            : null\r\n                                        }\r\n                                        purposeID={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.purpose_id\r\n                                            : null\r\n                                        }\r\n                                        title={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.title\r\n                                            : \"\"\r\n                                        }\r\n                                        description={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.description\r\n                                            : \"\"\r\n                                        }\r\n                                        category={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.category\r\n                                            : \"\"\r\n                                        }\r\n                                        subcategory={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.subcategory\r\n                                            : \"\"\r\n                                        }\r\n                                        subcategory2={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.subcategory2\r\n                                            : \"\"\r\n                                        }\r\n                                        keywords={\r\n                                          activePurposeData !== null\r\n                                            ? activePurposeData.keywords\r\n                                            : \"\"\r\n                                        }\r\n                                      />\r\n                                    </Card.Body>\r\n                                  </Accordion.Collapse>\r\n                                </Card>\r\n                              </Accordion>\r\n                            </Tab.Pane>\r\n                          </Tab.Content>\r\n                        </Col>\r\n                      </Row>\r\n                    </Tab.Container>\r\n                    {/* pagination prev */}\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            );\r\n            // console.log(\"BUSINESS:\", userBusinesses[business]);\r\n          })}\r\n\r\n        {/**\r\n         * Card: Add business\r\n         */}\r\n        <Card>\r\n          <Accordion.Toggle\r\n            as={Card.Header}\r\n            eventKey=\"addBusiness\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() =>\r\n              setActiveBusiness(\r\n                activeBusiness !== \"addBusiness\" ? \"addBusiness\" : null\r\n              )\r\n            }\r\n          >\r\n            <span>\r\n              <Add\r\n                style={{\r\n                  color: \"var(--dark)\",\r\n                  fontSize: \"1.2rem\",\r\n                  paddingBottom: \"0.2rem\",\r\n                }}\r\n              />\r\n              &nbsp;\r\n              {t(\"Add Business\")}\r\n            </span>\r\n          </Accordion.Toggle>\r\n          <Accordion.Collapse eventKey=\"addBusiness\">\r\n            <Card.Body>\r\n              <BusinessRegistration {...args} />\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n      {userBusinesses !== null && (\r\n        <>\r\n          <br />\r\n\r\n          <Pagination\r\n            {...args}\r\n            size=\"md\"\r\n            countItems={countBusinesses}\r\n            itemsPerPage={businessesPerPage}\r\n            active={activePageBusinesses}\r\n            onClick={(number) => getBusinesses(number)}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  if (accountNumber === null) setRedirectTo(\"/sign-out\");\r\n\r\n  /**\r\n   * Return\r\n   ============================================================================ */\r\n  return <>{jsx}</>;\r\n};\r\n"],"sourceRoot":""}