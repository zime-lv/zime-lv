{"version":3,"sources":["components/listViewer/index.js","components/listViewer/ListViewer.js"],"names":["args","props","Object","assign","namespace","request","barrelGetters","textTitlesList","countTexts","textItemsPerPage","activePageTexts","siteEditMode","setTextTitlesList","barrelSetters","barrelFunctions","formatDate","getTextsList","sendRequest","t","useTranslation","refEdit","refTitles","onSubmit","jobs","jobsUpdated","updateJobs","console","log","JSON","stringify","data","req","map","jobString","index","record","id","refID","title","current","value","push","ListViewerViewMode","className","job","keyJob","created","month","day","year","key","href","textid","style","float","ListViewerEditMode","items","setItems","onValue","onSortableValue","onSortEnd","caption","type","newOrder","ts","React","createRef","whiteSpace","position","zIndex","onClick","display","toggleEdit","cursor","color","fontSize","ref","margin","Group","Label","Control","placeholder","name","defaultValue","size","countItems","itemsPerPage","active","number","newPage"],"mappings":"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","file":"static/js/17.10e750b2.chunk.js","sourcesContent":["export { default } from \"./ListViewer\";\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Edit as EditIcon } from \"@material-ui/icons\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\nimport ListGroupItem from \"../listGroupItem\";\r\nimport Pagination from \"../pagination\";\r\nimport Sortable from \"../sortable\";\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * Default export\r\n ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = { namespace: \"ListViewer\", request: \"update texts\" };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    textTitlesList,\r\n    countTexts,\r\n    textItemsPerPage,\r\n    activePageTexts,\r\n    siteEditMode,\r\n  } = props.barrelGetters;\r\n  const { setTextTitlesList } = props.barrelSetters;\r\n  const { formatDate, getTextsList, sendRequest } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Module vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Refs\r\n   ============================================================================ */\r\n  const refEdit = [];\r\n  const refTitles = [];\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (jobs) => {\r\n    if (typeof jobs === \"undefined\") jobs = textTitlesList;\r\n\r\n    const jobsUpdated = updateJobs(jobs);\r\n\r\n    console.log(jobsUpdated);\r\n\r\n    setTextTitlesList(JSON.stringify(jobsUpdated));\r\n\r\n    const data = { jobs: jobsUpdated };\r\n\r\n    return sendRequest({ req: props.request, data });\r\n  };\r\n\r\n  const updateJobs = (jobs) => {\r\n    const jobsUpdated = [];\r\n\r\n    jobs.map((jobString, index) => {\r\n      // const record = JSON.parse(jobString);\r\n      const record = jobString;\r\n      const { id, title } = record;\r\n      const refID = id;\r\n      // console.log(record);\r\n\r\n      if (refTitles[refID].current !== null) {\r\n        record.title = refTitles[refID].current.value;\r\n        // console.log(refTopics[refID].current.value);\r\n      }\r\n\r\n      // console.log(\r\n      //   refTopics[refID].current.value,\r\n      //   refLinks[refID].current.value\r\n      // );\r\n\r\n      // jobsUpdated.push(JSON.stringify(record));\r\n      jobsUpdated.push(record);\r\n    });\r\n    // console.log(topicsUpdated);\r\n    return jobsUpdated;\r\n  };\r\n\r\n  const ListViewerViewMode = () => {\r\n    return (\r\n      <ul className=\"topic-ul\">\r\n        {textTitlesList.map((job, keyJob) => {\r\n          // return <div key={keyJob}>{job.title}</div>;\r\n          const created = formatDate(job.created, {\r\n            month: \"numeric\",\r\n            day: \"numeric\",\r\n            year: \"numeric\",\r\n          });\r\n          return (\r\n            <li key={keyJob}>\r\n              <a href={`/job/${job.textid}`}>{job.title}</a>\r\n              <span className=\"text-muted\" style={{ float: \"right\" }}>\r\n                {created}\r\n              </span>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  const ListViewerEditMode = () => {\r\n    return (\r\n      <>\r\n        <Sortable\r\n          items={textTitlesList}\r\n          setItems={setTextTitlesList}\r\n          onValue={onSortableValue}\r\n          onSortEnd={onSortEnd}\r\n        />\r\n\r\n        <br />\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          type=\"button\"\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n          onSubmit={onSubmit}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const onSortEnd = (newOrder) => {\r\n    // console.log(newOrder);\r\n    // onSubmit(newOrder);\r\n  };\r\n\r\n  const toggleEdit = (id) => {\r\n    refEdit[id].current.style.display =\r\n      refEdit[id].current.style.display === \"none\" ? \"block\" : \"none\";\r\n  };\r\n\r\n  const onSortableValue = (value) => {\r\n    // const record = JSON.parse(value);\r\n    const { id, textid, title, ts, type } = value;\r\n\r\n    const refID = id;\r\n    refEdit[refID] = React.createRef();\r\n    refTitles[refID] = React.createRef();\r\n\r\n    // console.log(value);\r\n    return (\r\n      <>\r\n        <span\r\n          style={{\r\n            whiteSpace: \"nowrap\",\r\n            position: \"relative\",\r\n            zIndex: 1000,\r\n          }}\r\n        >\r\n          <a href={`/job/${textid}`}>{title}</a>{\" \"}\r\n          <span onClick={() => toggleEdit(refID)} style={{ cursor: \"pointer\" }}>\r\n            <EditIcon style={{ color: \"var(--dark)\", fontSize: \"1rem\" }} />\r\n          </span>\r\n        </span>\r\n\r\n        <div\r\n          ref={refEdit[refID]}\r\n          style={{ display: \"none\", margin: \"10px 0 0 24px\" }}\r\n        >\r\n          <Form.Group>\r\n            <Form.Label>{t(\"Title\")}</Form.Label>\r\n            <Form.Control\r\n              type=\"string\"\r\n              placeholder={\"\"}\r\n              name={`topic-${refID}`}\r\n              ref={refTitles[refID]}\r\n              defaultValue={title}\r\n            />\r\n          </Form.Group>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const getJSX = () => {\r\n    if (textTitlesList === null) return <></>;\r\n\r\n    return (\r\n      <>\r\n        {!siteEditMode ? <ListViewerViewMode /> : <ListViewerEditMode />}\r\n        <br />\r\n        <Pagination\r\n          {...args}\r\n          size=\"sm\"\r\n          countItems={countTexts}\r\n          itemsPerPage={textItemsPerPage}\r\n          active={activePageTexts}\r\n          onClick={(number) => getTextsList({ newPage: number })}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Return\r\n   ============================================================================ */\r\n  return <>{getJSX()}</>;\r\n};\r\n"],"sourceRoot":""}