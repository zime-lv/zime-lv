{"version":3,"sources":["components/viewer/ViewerAccordion.js","components/viewer/Viewer.js"],"names":["args","props","Object","assign","namespace","refs","barrelGetters","helpPath3","contactMessageCardsCount","contactMessageCardsAttributes","setHelpPath","barrelFunctions","useTranslation","t","defaultActiveKey","Array","fill","map","item","index","key","title","eventkey","active","onClick","attributes","ref","style","marginTop","articles","barrelSetters","setContactMessage","setContactMessageCardsCount","setContactMessageCardsAttributes","getFileLinkFromURI","getArrayObject","refViewer","React","createRef","refViewerAccordion","cardAttributes","n","useEffect","link","articleCached","text","cardsCount","indexOf","current","innerHTML","split","DOMParser","parseFromString","getElementsByTagName","nodeValue","JSON","stringify"],"mappings":"6IAAA,mDAgBe,mBAACA,GAId,IAKMC,EAAQC,OAAOC,OALN,CAAEC,UAAW,SAAUC,KAAM,IAKNL,GATf,EAkBnBC,EAAMK,cAHRC,EAfqB,EAerBA,UACAC,EAhBqB,EAgBrBA,yBACAC,EAjBqB,EAiBrBA,8BAGMC,EAAgBT,EAAMU,gBAAtBD,YAMME,YAAe,CAACX,EAAMG,YAA5BS,EAwCR,OAAsC,OAAlCJ,EAA+C,qCAEjD,oCACE,kBAAC,IAAD,CAAWK,iBAAkBP,GAC1BQ,MAAMP,GACJQ,OACAC,KAAI,SAACC,EAAMC,GACV,OACE,kBAAC,UAAD,CACEC,IAAKD,EACLE,MACkD,qBAAzCZ,EAA8BU,GACjCV,EAA8BU,GAAOE,MACrC,GAENC,SACkD,qBAAzCb,EAA8BU,GACjCV,EAA8BU,GAAOG,SACrC,GAENC,OAAQhB,EACRiB,QAAS,WAjCC,IAACC,EACG,qBADHA,EAkCOhB,EAA8BU,KA/B5DT,EACE,EACAH,IAAckB,EAAWH,SAAW,GAAKG,EAAWH,YAgC1C,oCACE,yBAAKI,IAAKzB,EAAMI,KAAKc,GAAQQ,MAAO,c,iCC5GtD,mDAoBe,mBAAC3B,GAoCd,IAhCA,IAKMC,EAAQC,OAAOC,OALN,CAAEC,UAAW,SAAUwB,UAAW,GAKX5B,GAK9B6B,EAAa5B,EAAMK,cAAnBuB,SAde,EAmBnB5B,EAAM6B,cAHRC,EAhBqB,EAgBrBA,kBACAC,EAjBqB,EAiBrBA,4BACAC,EAlBqB,EAkBrBA,iCAlBqB,EAoBwBhC,EAAMU,gBAA7CuB,EApBe,EAoBfA,mBAAoBC,EApBL,EAoBKA,eAWtBC,GALQxB,YAAe,CAACX,EAAMG,YAA5BS,EAKUwB,IAAMC,aAClBC,EAAqB,GAErBC,EAAiB,GAEdC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,EAAmBE,GAAKJ,IAAMC,YAsDhC,OAhDAD,IAAMK,WAAU,WACd,IAAMC,EAAOT,IACPU,EAAgBT,EAAeN,EAAU,OAAQc,GACjDE,EACqB,qBAAlBD,GAAmD,OAAlBA,EACpCA,EAAcC,KACd,GAEFC,EAAa,GACoB,IAAjCD,EAAKE,QAAQ,eACfX,EAAUY,QAAQC,UAAYJ,EAEbA,EAAKK,MAAM,eAEnBjC,KAAI,SAAC4B,EAAM1B,GAClB,GAAc,IAAVA,EACFiB,EAAUY,QAAQC,UAAYJ,MACzB,CACL,GAA8C,OAA1CN,EAAmBpB,EAAQ,GAAG6B,QAAkB,CAClD,IAGM3B,GAHS,IAAI8B,WAEGC,gBAAgBP,EAAM,YACvBQ,qBAAqB,MAAM,GAAG5B,WAAWJ,MAC3DiC,UACGhC,EAAWD,EACjBmB,EAAerB,EAAQ,GAAK,CAAEE,QAAOC,YACrCiB,EAAmBpB,EAAQ,GAAG6B,QAAQC,UAAYJ,EAEpDC,QASNf,EAAkBc,GAClBb,EAA4Bc,GAC5Bb,EAAiCsB,KAAKC,UAAUhB,MAI/C,IAMD,oCACE,yBAAKd,IAAKU,EAAWT,MAAO,CAAEC,UAAW3B,EAAM2B,aAC/C,kBAAC,UAAD,eAAiBvB,KAAMkC,GAAwBvC,O","file":"static/js/35.a634cb6e.chunk.js","sourcesContent":["/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Accordion } from \"react-bootstrap\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\nimport AccordionCard from \"../accordionCard\";\r\n\r\n/**\r\n * Default export\r\n ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = { namespace: \"Viewer\", refs: [] };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const {\r\n    helpPath3,\r\n    contactMessageCardsCount,\r\n    contactMessageCardsAttributes,\r\n  } = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  const { setHelpPath } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Module vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Refs\r\n   ============================================================================ */\r\n  // const refViewer = [];\r\n  // refViewer[0] = React.createRef();\r\n  // refViewer[1] = React.createRef();\r\n\r\n  /**\r\n   * Effects\r\n   ============================================================================ */\r\n  // React.useEffect(() => {\r\n  //   const text = props.text;\r\n  //   if (refViewer[0].current !== null) {\r\n  //     refViewer[0].current.innerHTML = text;\r\n  //   }\r\n  //   if (refViewer[1].current !== null) {\r\n  //     refViewer[1].current.innerHTML = text;\r\n  //   }\r\n  //   // setContactMessage(text);\r\n\r\n  //   // eslint-disable-next-line\r\n  // }, []);\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const toggleCardClick = (attributes) => {\r\n    if (typeof attributes === \"undefined\") return;\r\n\r\n    setHelpPath(\r\n      3,\r\n      helpPath3 === attributes.eventkey ? \"\" : attributes.eventkey\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Return\r\n   ============================================================================ */\r\n  if (contactMessageCardsAttributes === null) return <></>;\r\n  return (\r\n    <>\r\n      <Accordion defaultActiveKey={helpPath3}>\r\n        {Array(contactMessageCardsCount)\r\n          .fill()\r\n          .map((item, index) => {\r\n            return (\r\n              <AccordionCard\r\n                key={index}\r\n                title={\r\n                  typeof contactMessageCardsAttributes[index] !== \"undefined\"\r\n                    ? contactMessageCardsAttributes[index].title\r\n                    : \"\"\r\n                }\r\n                eventkey={\r\n                  typeof contactMessageCardsAttributes[index] !== \"undefined\"\r\n                    ? contactMessageCardsAttributes[index].eventkey\r\n                    : \"\"\r\n                }\r\n                active={helpPath3}\r\n                onClick={() =>\r\n                  toggleCardClick(contactMessageCardsAttributes[index])\r\n                }\r\n              >\r\n                <>\r\n                  <div ref={props.refs[index]} style={{}}></div>\r\n                </>\r\n              </AccordionCard>\r\n            );\r\n          })}\r\n      </Accordion>\r\n    </>\r\n  );\r\n};\r\n","/**\r\n * User CSS\r\n ============================================================================ */\r\nimport \"./Help.css\";\r\n\r\n/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ViewerAccordion from \"./ViewerAccordion\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\n// import Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = { namespace: \"Viewer\", marginTop: 0 };\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  const { articles } = props.barrelGetters;\r\n  const {\r\n    setContactMessage,\r\n    setContactMessageCardsCount,\r\n    setContactMessageCardsAttributes,\r\n  } = props.barrelSetters;\r\n  const { getFileLinkFromURI, getArrayObject } = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Module vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]);\r\n\r\n  /**\r\n   * Refs\r\n   ============================================================================ */\r\n  const refViewer = React.createRef();\r\n  const refViewerAccordion = [];\r\n\r\n  const cardAttributes = [];\r\n\r\n  for (let n = 0; n < 20; n++) {\r\n    refViewerAccordion[n] = React.createRef();\r\n  }\r\n\r\n  /**\r\n   * Effects\r\n   ============================================================================ */\r\n  React.useEffect(() => {\r\n    const link = getFileLinkFromURI();\r\n    const articleCached = getArrayObject(articles, \"link\", link);\r\n    const text =\r\n      typeof articleCached !== \"undefined\" && articleCached !== null\r\n        ? articleCached.text\r\n        : \"\";\r\n\r\n    let cardsCount = 0;\r\n    if (text.indexOf(\"<newcard />\") === -1) {\r\n      refViewer.current.innerHTML = text;\r\n    } else {\r\n      const textCard = text.split(\"<newcard />\");\r\n\r\n      textCard.map((text, index) => {\r\n        if (index === 0) {\r\n          refViewer.current.innerHTML = text;\r\n        } else {\r\n          if (refViewerAccordion[index - 1].current !== null) {\r\n            const parser = new DOMParser();\r\n            // console.log(\"text:\", text);\r\n            const xmlDoc = parser.parseFromString(text, \"text/xml\");\r\n            const title = xmlDoc.getElementsByTagName(\"ul\")[0].attributes.title\r\n              .nodeValue;\r\n            const eventkey = title;\r\n            cardAttributes[index - 1] = { title, eventkey };\r\n            refViewerAccordion[index - 1].current.innerHTML = text;\r\n          }\r\n          cardsCount++;\r\n        }\r\n      });\r\n\r\n      // if (refViewerAccordion[1].current !== null) {\r\n      //   refViewerAccordion[1].current.innerHTML = textCard[1];\r\n      // }\r\n    }\r\n\r\n    setContactMessage(text);\r\n    setContactMessageCardsCount(cardsCount);\r\n    setContactMessageCardsAttributes(JSON.stringify(cardAttributes));\r\n    // console.log(\"cardAttributes:\", cardAttributes);\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  /**\r\n   * Return\r\n   ============================================================================ */\r\n  return (\r\n    <>\r\n      <div ref={refViewer} style={{ marginTop: props.marginTop }}></div>\r\n      <ViewerAccordion refs={refViewerAccordion} {...args} />\r\n    </>\r\n  );\r\n};\r\n"],"sourceRoot":""}