{"version":3,"sources":["components/purposeProperty/index.js","components/purposeProperty/PurposeProperty.js"],"names":["args","props","Object","assign","purposeID","property","content","language","barrelGetters","t","useTranslation","schema","yup","purposeTitle","optional","required","min","max","trim","purposeDescription","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","noValidate","onSubmit","Group","controlId","Control","type","placeholder","aria-describedby","name","value","onChange","isInvalid","Feedback","as","rows","caption","request","namespace","validationSchema","data","purpose_id","console","log","initialValues"],"mappings":"yIAAA,qE,iCCAA,yEAiBe,mBAACA,GAId,IAKMC,EAAQC,OAAOC,OALN,CAAEC,UAAW,KAAMC,SAAU,KAAMC,QAAS,IAKrBN,GAY9BO,EAPQN,EAOaO,cAArBD,SAOAE,EAAMC,YAAe,CAAC,oBAAtBD,EAEFE,EAASC,IAAW,CACxBC,aACqB,UAAnBZ,EAAMI,SACFO,MAAaE,WACbF,MAEGG,SAASN,EAAE,sCACXO,IAAI,EAAGP,EAAE,4BACTQ,IAAI,GAAIR,EAAE,2BACVS,OACTC,mBAAoBP,MAAaE,aA0EnC,OACE,kBAAC,IAAD,CACEM,UAvDwB,SAAC,GAAD,IAC1BC,EAD0B,EAC1BA,aACAC,EAF0B,EAE1BA,aAEAC,GAJ0B,EAG1BC,WAH0B,EAI1BD,QACAE,EAL0B,EAK1BA,QAEAC,GAP0B,EAM1BC,QAN0B,EAO1BD,QAP0B,OAS1B,kBAAC,IAAD,CAAME,YAAU,EAACC,SAAUR,GAEL,UAAnBpB,EAAMI,UACL,kBAAC,IAAKyB,MAAN,CAAYC,UAAU,6BACpB,kBAAC,IAAD,KACE,kBAAC,IAAKC,QAAN,CACEC,KAAK,OACLC,YAAY,GACZC,mBAAiB,oBACjBC,KAAK,eACLC,MAAOd,EAAOV,aACdyB,SAAUhB,EACViB,YAAab,EAAOb,cAAgBY,EAAQZ,eAE9C,kBAAC,IAAKmB,QAAQQ,SAAd,CAAuBP,KAAK,WACzBP,EAAOb,gBAOI,gBAAnBZ,EAAMI,UACL,kBAAC,IAAKyB,MAAN,CAAYC,UAAU,sBACpB,kBAAC,IAAKC,QAAN,CACES,GAAG,WACHC,KAAK,IACLN,KAAK,qBACLC,MAAOd,EAAOJ,mBACdmB,SAAUhB,KAMhB,kBAAC,UAAD,iBACMtB,EADN,CAEE2C,QAASlC,EAAE,UACXmC,QAAQ,0BACRC,UAAW5C,EAAM4C,eAQnBC,iBAAkBnC,EAClBkB,SAvEa,SAACkB,GAKhBA,EAAKxC,SAAWA,EAChBwC,EAAKC,WAAa/C,EAAMG,UAGxB6C,QAAQC,IAAI,6BAA8BH,IA+DxCI,cAAe,CACbtC,aAAiC,UAAnBZ,EAAMI,SAAuBJ,EAAMK,QAAU,KAC3Da,mBACqB,gBAAnBlB,EAAMI,SAA6BJ,EAAMK,QAAU","file":"static/js/6.a6c598d5.chunk.js","sourcesContent":["export { default } from \"./PurposeProperty\";\r\n","/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\n/**\r\n  * User imports\r\n  ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\n\r\n/**\r\n * Default export\r\n */\r\nexport default (args) => {\r\n  /**\r\n    * Default Properties\r\n    ============================================================================ */\r\n  let defaults = { purposeID: null, property: null, content: \"\" };\r\n\r\n  /**\r\n    * Properties\r\n    ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n    * Barrels\r\n    ============================================================================ */\r\n  const barrels = props;\r\n\r\n  // const { businessID } = props;\r\n\r\n  /**\r\n   * Barrels\r\n   */\r\n  const { language } = barrels.barrelGetters;\r\n  // const {} = barrels.barrelSetters;\r\n  // const {} = barrels.barrelFunctions;\r\n  // const {} = barrels.barrelEventHandlers;\r\n\r\n  // const userDataParsed = JSON.parse(userData);\r\n  // const userDataParsed = userData;\r\n  const { t } = useTranslation([\"PurposeProperty\"]);\r\n\r\n  const schema = yup.object({\r\n    purposeTitle:\r\n      props.property !== \"title\"\r\n        ? yup.string().optional()\r\n        : yup\r\n            .string()\r\n            .required(t(\"Purpose title is a required field\"))\r\n            .min(3, t(\"Purpose title too short\"))\r\n            .max(70, t(\"Purpose title too long\"))\r\n            .trim(),\r\n    purposeDescription: yup.string().optional(),\r\n  });\r\n\r\n  /**\r\n   * Transfer to self\r\n   * @param {object} data\r\n   */\r\n  const onSubmit = (data) => {\r\n    // data.reviser = getReviser();\r\n    // data.workplace = getWorkplace();\r\n    // data.businessID = businessID;\r\n    // data.uid = accountNumber;\r\n    data.language = language;\r\n    data.purpose_id = props.purposeID;\r\n    // purposeDescription\r\n\r\n    console.log(\"UPDATE PURPOSE PROPS DATA:\", data);\r\n\r\n    // onPurposeRegistration({ req: \"update purpose property\", data: data });\r\n  };\r\n\r\n  const RegisterPurposeForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    errors,\r\n  }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      {/* Purpose Title */}\r\n      {props.property === \"title\" && (\r\n        <Form.Group controlId=\"validationFormikPurposeID\">\r\n          <InputGroup>\r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"purposeTitle\"\r\n              value={values.purposeTitle}\r\n              onChange={handleChange}\r\n              isInvalid={!!errors.purposeTitle && touched.purposeTitle}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.purposeTitle}\r\n            </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      )}\r\n\r\n      {/* Purpose Description */}\r\n      {props.property === \"description\" && (\r\n        <Form.Group controlId=\"purposeDescription\">\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows=\"3\"\r\n            name=\"purposeDescription\"\r\n            value={values.purposeDescription}\r\n            onChange={handleChange}\r\n          />\r\n        </Form.Group>\r\n      )}\r\n\r\n      {/* Submit button */}\r\n      <SubmitButton\r\n        {...args}\r\n        caption={t(\"Submit\")}\r\n        request=\"update purpose property\"\r\n        namespace={props.namespace}\r\n      />\r\n    </Form>\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      component={RegisterPurposeForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        purposeTitle: props.property === \"title\" ? props.content : null,\r\n        purposeDescription:\r\n          props.property === \"description\" ? props.content : null,\r\n      }}\r\n    />\r\n  );\r\n};\r\n"],"sourceRoot":""}