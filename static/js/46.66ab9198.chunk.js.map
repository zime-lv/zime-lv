{"version":3,"sources":["components/_templates/FormComponent.js"],"names":["args","props","Object","assign","namespace","request","t","useTranslation","schema","yup","text1","required","component","handleSubmit","handleChange","values","handleBlur","touched","errors","isValid","validateForm","title","noValidate","onSubmit","Group","Label","Control","type","placeholder","aria-describedby","name","value","onChange","isInvalid","Feedback","caption","validationSchema","data","console","log","initialValues"],"mappings":"yHAAA,yEAkBe,mBAACA,GAId,IAKMC,EAAQC,OAAOC,OALN,CAAEC,UAAW,gBAAiBC,QAAS,iBAKhBL,GAa9BM,EAAMC,YAAe,CAACN,EAAMG,YAA5BE,EAKFE,EAASC,IAAW,CACxBC,MAAOD,MAAaE,SAASL,EAAE,wBAsDjC,OACE,kBAAC,IAAD,CACEM,UA3CkB,SAAC,GAAD,IACpBC,EADoB,EACpBA,aACAC,EAFoB,EAEpBA,aAEAC,GAJoB,EAGpBC,WAHoB,EAIpBD,QACAE,EALoB,EAKpBA,QAGAC,GARoB,EAMpBC,QANoB,EAOpBC,aAPoB,EAQpBF,QARoB,OAUpB,kBAAC,UAAD,CAAMG,MAAOf,EAAE,cACb,kBAAC,IAAD,CAAMgB,YAAU,EAACC,SAAUV,GACzB,kBAAC,IAAKW,MAAN,KACE,kBAAC,IAAKC,MAAN,KAAanB,EAAE,UACf,kBAAC,IAAKoB,QAAN,CACEC,KAAK,SACLC,YAAa,GACbC,mBAAiB,oBACjBC,KAAK,QACLC,MAAOhB,EAAOL,MACdsB,SAAUlB,EACVmB,YAAaf,EAAOR,OAASO,EAAQP,QAEvC,kBAAC,IAAKgB,QAAQQ,SAAd,CAAuBP,KAAK,WACzBT,EAAOR,QAIZ,kBAAC,UAAD,iBACMV,EADN,CAEEmC,QAAS7B,EAAE,UACXD,QAASJ,EAAMI,QACfD,UAAWH,EAAMG,gBAYrBgC,iBAAkB5B,EAClBe,SApDa,SAACc,GAChBC,QAAQC,IAAIF,IAoDVG,cAAe,CACb9B,MAAO","file":"static/js/46.66ab9198.chunk.js","sourcesContent":["/**\r\n * System imports\r\n ============================================================================ */\r\nimport React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { Formik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\n/**\r\n * User imports\r\n ============================================================================ */\r\nimport SubmitButton from \"../submitButton\";\r\nimport Card from \"../card\";\r\n\r\n/**\r\n * Default export\r\n ============================================================================ */\r\nexport default (args) => {\r\n  /**\r\n   * Default Properties\r\n   ============================================================================ */\r\n  let defaults = { namespace: \"FormComponent\", request: \"get something\" }; // TODO: Adjust this\r\n\r\n  /**\r\n   * Properties\r\n   ============================================================================ */\r\n  const props = Object.assign(defaults, args);\r\n\r\n  /**\r\n   * Barrels\r\n   ============================================================================ */\r\n  // const {} = props.barrelGetters;\r\n  // const {} = props.barrelSetters;\r\n  // const {} = props.barrelFunctions;\r\n  // const {} = props.barrelEventHandlers;\r\n\r\n  /**\r\n   * Module vars\r\n   ============================================================================ */\r\n  const { t } = useTranslation([props.namespace]); // adjust namespace\r\n\r\n  /** \r\n   * Yup schema\r\n   ============================================================================ */\r\n  const schema = yup.object({\r\n    text1: yup.string().required(t(\"Text1 is required\")),\r\n  });\r\n\r\n  /**\r\n   * Functions\r\n   ============================================================================ */\r\n  const onSubmit = (data) => {\r\n    console.log(data);\r\n  };\r\n\r\n  /**\r\n   * Form\r\n   ============================================================================ */\r\n  const ComponentForm = ({\r\n    handleSubmit,\r\n    handleChange,\r\n    handleBlur,\r\n    values,\r\n    touched,\r\n    isValid,\r\n    validateForm,\r\n    errors,\r\n  }) => (\r\n    <Card title={t(\"Component\")}>\r\n      <Form noValidate onSubmit={handleSubmit}>\r\n        <Form.Group>\r\n          <Form.Label>{t(\"TEXT1\")}</Form.Label>\r\n          <Form.Control\r\n            type=\"string\"\r\n            placeholder={\"\"}\r\n            aria-describedby=\"inputGroupPrepend\"\r\n            name=\"text1\"\r\n            value={values.text1}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.text1 && touched.text1}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.text1}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n        <SubmitButton\r\n          {...args}\r\n          caption={t(\"Submit\")}\r\n          request={props.request}\r\n          namespace={props.namespace}\r\n        />\r\n      </Form>\r\n    </Card>\r\n  );\r\n\r\n  /**\r\n   * Formik return\r\n   ============================================================================ */\r\n  return (\r\n    <Formik\r\n      component={ComponentForm}\r\n      validationSchema={schema}\r\n      onSubmit={onSubmit}\r\n      initialValues={{\r\n        text1: \"\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n"],"sourceRoot":""}